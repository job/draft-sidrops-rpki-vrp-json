<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2234.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC4234 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4234.xml">
<!ENTITY nbsp    "&#160;">
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc strict="yes" ?>
<?rfc comments="no" ?>
<?rfc inline="no" ?>
<?rfc editing="no" ?>
<?rfc toc="yes" ?>
<?rfc tocompact="yes" ?>
<?rfc tocdepth="3" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std"
    ipr="trust200902"
    docName="draft-spaghetti-sidrops-rpki-vrp-yang-00"
    submissionType="IETF">

<front>

    <title abbrev="JSON RPKI VRPs">
        JSON format for transporting RPKI VRPs
    </title>

    <author fullname="Job Snijders" initials="J." surname="Snijders">
        <organization>NTT</organization>

        <address>
            <postal>
                <street>Theodorus Majofskistraat 100</street>
                <code>1065 SZ</code>
                <city>Amsterdam</city>
                <country>The Netherlands</country>
            </postal>
            <email>job@ntt.net</email>
        </address>
    </author>

    <date />
    <area>Ops</area>
    <workgroup>SIDROPS</workgroup>

    <keyword>RPKI</keyword>
    <keyword>VRP</keyword>
    <keyword>YANG</keyword>

    <abstract>
        <t>
            This document describes a JSON format commonly used datastructure for RPKI Validated ROA Payload data.
            This specific datastructure is commonly used in the transport between RPKI Cache Validators and BGP routers.
        </t>
    </abstract>
    <note title="Requirements Language">
        <t>
            The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.
        </t>
    </note>
</front>
<middle>
    <section title="Introduction">
        <t>
                This document defines a base <xref target="RFC8259">JSON</xref> data structure for <xref target="RFC6480">RPKI</xref>, <xref target="RFC6811">Validated ROA Prefix</xref> (VRP) information.
                Such export functionality has emerged in several implementations of relaying party (RP) software, but was not previously standardized, resulting in loose coordination between implementers.
                This module establishes a simple and consistent interface for information export by RPs drawing from best practices observed in existing implementations.
        </t>
        </section>

        <section title="Export Model Design and Structure">
            <t>
                This section should explain why the specific elements have been chosen
                for export, and why the structure of roas block + prefix and 
                AS content is the most useful or widely used.
            </t>
        </section>

        <section title="RPKI VRP Export Module">
            <figure>
                <artwork><![CDATA[
<CODE BEGINS> file "rpki-vrps.yang"
module rpki-vrp {
  
  namespace "urn:ietf:params:xml:ns:yang:rpki-vrp";
  
  prefix rpki-vrp;
  import "ietf-inet-types" {
    prefix inet;
  }

  typedef asn {
    type string {
      pattern 'AS(0|[1-9][0-9]{0,8}|[1-3][0-9]{1,9}|4([0-1][0-9]{8}|2([0-8][0-9]{7}|9([0-3][0-9]{6}|4([0-8][0-9]{5}|9([0-5][0-9]{4}|6([0-6][0-9]{3}|7([0-1][0-9]{2}|2([0-8][0-9]|9[0-5])))))))))';
    }
    description
      "The Autonomous System Number";
  }

  typedef ta {
    type string
  }

  typedef ip-mask {
    type union {
      type ipv4-mask;
      type ipv6-mask;
    }
  }

  typedef ipv4-mask {
    type uint8 {
      range "0 .. 32";
    }
  }

  typedef ipv6-mask {
    type uint8 {
      range "0 .. 128";
    }
  }

  container roas {
    config true;
    list roas {
      key "prefix asn";
      leaf asn {
        type asn;
        mandatory true;
      }
      leaf prefix {
        type inet:ip-prefix;
        mandatory true;
      }
      leaf maxLength {
        type ip-mask;
        mandatory true;
      }
      leaf ta {
        type ta;
        mandatory true;
      }
      must "number(substring-after(prefix,'/')) >= number(maxLength)" {
        error-message "Max prefix Length is larger then prefix";
      }
    }
  }
}
<CODE ENDS>
        ]]></artwork>
        </figure>
        </section>


        <section title="Security Considerations">
            <t>
                A few words about not spooking parsers would fit here.
            </t>
        </section>

        <section title="IANA Considerations">
            <t>
                None.
            </t>
        </section>

        <section title="Acknowledgments">
            <t>
                The authors would like to thank Yannis Gonianakis and Louis Poinsignon for their contributions to the data model described in this document.
                The authors are grateful for feedback from Kooistra and David Monosov.
            </t>
        </section>

    </middle>
    <back>
        <references title="Normative References">
            <?rfc include="reference.RFC.2119"?>
            <?rfc include="reference.RFC.6480"?>
            <?rfc include="reference.RFC.6811"?>
            <?rfc include="reference.RFC.8174"?>
            <?rfc include="reference.RFC.8259"?>
        </references>
<!--
        <references title="Informative References">
        </references>
-->
    </back>
</rfc>
